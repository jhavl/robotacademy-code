WEBVTT
Kind: captions
Language: en

00:00:03.510 --> 00:00:07.240
In this section we are going to look at a
different type of spatial image processing

00:00:07.240 --> 00:00:12.460
operation. To illustrate this I am going to
take the Mona Lisa image and I have chosen

00:00:12.460 --> 00:00:17.109
a large number of random pixels within the
image and I have set them to either 0 or 1.

00:00:17.109 --> 00:00:23.250
This is sometimes called speckle noise or
salt and pepper noise. The image now is corrupted;

00:00:23.250 --> 00:00:26.670
it has got a large number of white and black
spots on it.

00:00:28.940 --> 00:00:34.760
One way to try and reduce the effect of this
noise would be to compute an average. We have

00:00:34.760 --> 00:00:41.269
seen before how the averaging operation tends
to blur out and reduce fine detail, so if

00:00:41.269 --> 00:00:48.149
I compute the average of this noise-corrupted
image we can see that the intensity of these

00:00:48.149 --> 00:00:52.620
noise pixels has got less, but they have also
tended to get a little bit bigger. They have

00:00:52.620 --> 00:00:57.989
been smeared out, they are now wider, but
they are not as distinct from the background.

00:00:57.989 --> 00:01:03.929
If I increase the size of the kernel that
we use for averaging we can see that the salt

00:01:03.929 --> 00:01:08.960
and pepper noise has perhaps almost completely
disappeared, but there has been some collateral

00:01:08.960 --> 00:01:14.960
damage, the image now is quite blurry. So
is there a way that we can reduce this salt

00:01:14.960 --> 00:01:20.830
and pepper noise without removing the fine
detail in the image that we want?

00:01:20.830 --> 00:01:25.970
And indeed there is the technique called rank
filtering, so to look at how this works we

00:01:25.970 --> 00:01:32.050
are going to zoom in on a very small 3 by
3 patch of the original image and we see some

00:01:32.050 --> 00:01:39.350
grey level values here and they are typically
around the 120 to a 130—the grey level values

00:01:39.350 --> 00:01:44.180
that should be at this particular region—and
we see that pixel has got a value of 0 … this

00:01:44.180 --> 00:01:48.400
is a noise pixel.
If we compute the average over this window,

00:01:48.400 --> 00:01:54.290
we see that it has a value of a 110. Now this
value is a bit lower than the other values

00:01:54.290 --> 00:01:58.710
that are around here; we probably wouldn’t
be expecting a value of a 110 here.

00:01:58.710 --> 00:02:04.210
And what has happened is that this value of
0 is so far away from the values that should

00:02:04.210 --> 00:02:09.670
be here that it has pulled the average down,
it’s influenced the average.

00:02:09.670 --> 00:02:14.249
We want a different sort of statistic, and
a statistic like the median value is actually

00:02:14.249 --> 00:02:21.060
more helpful. So the median value across this
3 by 3 median would be a 123 and that would

00:02:21.060 --> 00:02:28.409
perhaps be a much better guess at what the
value should be at this location. How do we

00:02:28.409 --> 00:02:32.519
compute the median? Well the simplest way
to compute the median is to take all of the

00:02:32.519 --> 00:02:37.819
values within this 3 by 3 window and stack
them up from the largest through to the smallest.

00:02:37.819 --> 00:02:45.430
We are going to rank them and rank number
1 pixel is the maximum value within this window.

00:02:45.430 --> 00:02:52.379
Rank 9, is the minimum value with in this
window. And rank 5 is the median value and

00:02:52.379 --> 00:02:58.019
it is the median value we are interested in.
So let’s apply a median filter to the Mona

00:02:58.019 --> 00:03:04.459
Lisa image. There she is with the salt and
pepper noise and here she is after we have

00:03:04.459 --> 00:03:09.760
applied a 3 by 3 median filter—we can see
that the effect of the noise has been dramatically

00:03:09.760 --> 00:03:14.409
reduced, but the fine detail in the image
has been mostly retained.

00:03:14.409 --> 00:03:19.639
To compute this we use the tool box function
irank. First argument is the input image.

00:03:19.639 --> 00:03:25.379
This case it would be noise corrupted Mona
Lisa, the second argument is a 3 by 3 matrix

00:03:25.379 --> 00:03:31.290
of ones, which indicates the size of the region
over which we want to compute the median.

00:03:31.290 --> 00:03:36.379
And the last argument 5 is the rank that we
want to choose. Because we have asked for

00:03:36.379 --> 00:03:44.629
median over a 3 by 3 window, rank 5 is the
middle value of the nine elements within that

00:03:44.629 --> 00:03:44.650
window.

