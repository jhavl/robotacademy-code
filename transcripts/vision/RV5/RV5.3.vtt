WEBVTT
Kind: captions
Language: en

00:00:03.409 --> 00:00:08.069
Now let’s consider the slightly more difficult
situation where we have two shark objects

00:00:08.069 --> 00:00:09.320
within our image.

00:00:09.320 --> 00:00:13.870
Now you and I looking at this image can clearly
see that there are two distinct regions; we’re

00:00:13.870 --> 00:00:15.650
not confused at all.

00:00:15.650 --> 00:00:19.640
But for the machine vision system that we’re
building, we need to develop an algorithm

00:00:19.640 --> 00:00:24.100
that can determine that there are two distinct
regions here.

00:00:24.100 --> 00:00:28.619
If we apply the technique of moments that
we just looked at and compute the moments

00:00:28.619 --> 00:00:35.059
of this scene, what we will end up with is
the centroid of a region, which contains the

00:00:35.059 --> 00:00:36.059
two sharks.

00:00:36.059 --> 00:00:38.390
We see the centroid in between the two sharks.

00:00:38.390 --> 00:00:42.490
It hasn’t been able to work out that they’re
separate, it’s just treated all the white

00:00:42.490 --> 00:00:48.129
pixels in the same way, and we see also that
the bounding box is drawn around the extremities

00:00:48.129 --> 00:00:51.840
of both sharks, rather than around the sharks
individually.

00:00:51.840 --> 00:00:55.780
We need some way to distinguish between these
two objects.

00:00:55.780 --> 00:00:59.280
Now the way that we do this is to transform
the image.

00:00:59.280 --> 00:01:03.879
So here is our input image and were going
to perform a transformation; it’s a process

00:01:03.879 --> 00:01:10.140
called connectivity analysis, and the output
image is shown on the right.

00:01:10.140 --> 00:01:14.789
We refer to this as a label image, and what’s
interesting about the labelling image is that

00:01:14.789 --> 00:01:20.380
all of the pixels that belong to the same
object are assigned the same label.

00:01:20.380 --> 00:01:25.350
So we see that all of the pixels that belong
to the top shark have been labelled 1.

00:01:25.350 --> 00:01:31.399
All of the pixels that correspond to the bottom
shark have been labelled 2, and all of the

00:01:31.399 --> 00:01:35.240
pixels that belong to the background have
been labelled 3.

00:01:35.240 --> 00:01:41.509
In this image the pixel values refer to the
label of the object if you like; to describe

00:01:41.509 --> 00:01:46.250
which of the n objects in the scene those
pixels belong to.

00:01:46.250 --> 00:01:49.500
This is a really powerful transformation.

00:01:49.500 --> 00:01:52.310
The white objects in the input scene are called
blobs.

00:01:52.310 --> 00:01:55.750
‘Blobs’ is actually a technical term—you’re
allowed to use it.

00:01:55.750 --> 00:02:00.751
In this input scene there are three blobs,
shark 1, shark 2 and the background, and in

00:02:00.751 --> 00:02:06.590
the output image the pixels have got values
1–3, indicating which blob they belong to.

00:02:06.590 --> 00:02:07.770
So what is a blob?

00:02:07.770 --> 00:02:12.640
It’s also known as a region, and sometimes
it’s called a connected component.

00:02:12.640 --> 00:02:19.470
It’s a set of contiguous pixels of the same
colour that are next to each other; they touch

00:02:19.470 --> 00:02:20.470
each other.

00:02:20.470 --> 00:02:23.460
And when we talk about colour, before we’ve
just been looking at a binary image where

00:02:23.460 --> 00:02:25.780
the pixels are either black or white.

00:02:25.780 --> 00:02:30.110
Often times we’ll start with a real colour
image, and the first processing stage is to

00:02:30.110 --> 00:02:32.680
convert that colour image into a boundary
image.

00:02:32.680 --> 00:02:38.010
So in the top example here we have a scene
with four yellow objects in it.

00:02:38.010 --> 00:02:42.950
And we perform some image processing operations
and we’ll talk about this in future lectures,

00:02:42.950 --> 00:02:47.760
to convert the yellow pixels to being true—or
white—and all the other colour pixels to

00:02:47.760 --> 00:02:49.720
being false—or black.

00:02:49.720 --> 00:02:53.910
In the bottom example we’re trying to find
the tomatoes on the bush, and we’re going

00:02:53.910 --> 00:02:59.170
to use image processing techniques that give
us a true result when the pixel is red and

00:02:59.170 --> 00:03:01.350
a false result when it is not red.

00:03:01.350 --> 00:03:06.430
So the first step is to take a real colour
image, convert it into a binary image where

00:03:06.430 --> 00:03:11.890
the pixel values are either true or false,
and then we can apply our connectivity analysis

00:03:11.890 --> 00:03:13.120
to that image.

00:03:13.120 --> 00:03:18.000
The label that we assign to a pixel indicates
which set it belongs to.

00:03:18.000 --> 00:03:24.180
Every pixel has the same label as its neighbour
to the north, south, east or west that has

00:03:24.180 --> 00:03:25.180
the same colour.

00:03:25.180 --> 00:03:29.350
This is a fundamental part of the connectivity
analysis algorithm.

00:03:29.350 --> 00:03:33.900
Now this process of performing connectivity
analysis has many names.

00:03:33.900 --> 00:03:37.720
Sometimes it’s called connected component
analysis; sometimes it’s called blob or

00:03:37.720 --> 00:03:42.250
region or image labelling; sometimes it’s
called blob or region colouring.

00:03:42.250 --> 00:03:44.750
Many names, the same algorithm.

00:03:44.750 --> 00:03:49.459
Here is our original binary image with two
sharks in it, and now in the middle we have

00:03:49.459 --> 00:03:54.290
the label image where the pixels have got
values of 1, 2 or 3 depending on whether pixels

00:03:54.290 --> 00:03:57.700
belong to shark 1, shark 2 or the background.

00:03:57.700 --> 00:04:02.990
Now I can apply a simple logical test to this
image, and I can say give me all of the pixels

00:04:02.990 --> 00:04:05.209
that have got a label value of 1.

00:04:05.209 --> 00:04:09.810
I end up with this binary image that contains
just one shark, the top shark.

00:04:09.810 --> 00:04:14.120
And once I have this image I can apply the
techniques we used previously to find the

00:04:14.120 --> 00:04:18.579
centroid and the bounding box of this particular
shark.

00:04:18.579 --> 00:04:24.551
Now I can ask for a binary image, which contains
all of the pixels that are labelled 2, and

00:04:24.551 --> 00:04:27.639
I have an image, a binary image which contains
just the bottom shark.

00:04:27.639 --> 00:04:32.770
Once I have this shark in isolation I can
apply the earlier techniques and again find

00:04:32.770 --> 00:04:37.700
its bounding box and its centroid.

00:04:37.700 --> 00:04:39.610
Now the background is also a blob.

00:04:39.610 --> 00:04:42.410
It’s all of the pixels that are labelled
3.

00:04:42.410 --> 00:04:47.280
So we can say what is the image where all
of the pixels are equal to 3, and we see here

00:04:47.280 --> 00:04:51.470
it is basically the background with shark
shaped holes in it.

00:04:51.470 --> 00:04:53.900
It’s a blob as well; it’s a very large
blob.

00:04:53.900 --> 00:04:58.770
It touches the edge of the image and it’s
got these two holes in it, which are the objects

00:04:58.770 --> 00:05:00.820
in the foreground.

00:05:00.820 --> 00:05:05.310
If we compute the moments of the background
below we find that it’s got a centroid which

00:05:05.310 --> 00:05:09.900
is roughly in the middle and it’s got a
very large bounding box which goes around

00:05:09.900 --> 00:05:14.380
the whole outside of the image.

00:05:14.380 --> 00:05:19.570
Now we have a binary image, or logical image,
that contains two blobs.

00:05:19.570 --> 00:05:21.770
So let’s compute the label image.

00:05:21.770 --> 00:05:24.650
The function that we use has actually got
two output arguments.

00:05:24.650 --> 00:05:29.560
The first output argument, L is the label
image itself, and the second output argument

00:05:29.560 --> 00:05:32.710
is the number of blobs it finds within the
scene.

00:05:32.710 --> 00:05:37.550
The function itself is called ilabel and we
parse in the binary image.

00:05:37.550 --> 00:05:44.300
So it’s computed L, which is an image, and
the number of blobs, which has got a value

00:05:44.300 --> 00:05:47.980
of 3, so it’s saying there, are 3 blobs
within this scene.

00:05:47.980 --> 00:05:51.510
There are the two sharks, and the background
blob.

00:05:51.510 --> 00:05:55.240
So let’s display the label image and investigate
that.

00:05:55.240 --> 00:06:00.760
Start a new figure and display the label image.

00:06:00.760 --> 00:06:04.270
Let’s have a look at some of the pixel values
within that.

00:06:04.270 --> 00:06:10.190
So these pixels here, all the ones that I’m
clicking on, have got a value of 3.

00:06:10.190 --> 00:06:15.770
That means these pixels belong to blob number
3, which is the background blob.

00:06:15.770 --> 00:06:21.040
All of these pixels here in this shark are
all labelled 1; that is, they all belong to

00:06:21.040 --> 00:06:22.650
blob number 1.

00:06:22.650 --> 00:06:30.449
These pixels down here all have a value of
2, so these pixels all belong to blob number

00:06:30.449 --> 00:06:31.940
2.

00:06:31.940 --> 00:06:37.910
Now what we can do is use a logical operation,
a logical test on the labelling of each in

00:06:37.910 --> 00:06:42.389
order to isolate the different blobs within
the image.

00:06:42.389 --> 00:06:51.660
What I can do now is to display all the pixels
who have a label equal to 1, and what we see

00:06:51.660 --> 00:06:54.650
now is that there is just a single shark in
this scene.

00:06:54.650 --> 00:07:01.090
Let’s have a look at all the pixels that
have got a label equal to 2 and now we see

00:07:01.090 --> 00:07:02.300
the second shark.

00:07:02.300 --> 00:07:08.229
So now what we’ve got is a scene with a
single blob in it, and this is a problem we’ve

00:07:08.229 --> 00:07:09.229
met before.

00:07:09.229 --> 00:07:14.430
We know how to work out the bounding box of
a scene that contains a single blob; we know

00:07:14.430 --> 00:07:20.100
how to compute the centroid, and the area
of a scene that contains just a single blob.

00:07:20.100 --> 00:07:25.650
So by using this intermediate step of labelling
the image, we can turn our complex problem

00:07:25.650 --> 00:07:30.790
with multiple regions into a problem that
we have seen before.

00:07:30.790 --> 00:07:39.479
An extra level of sophistication that we can
go to is to use the function iblobs.

00:07:39.479 --> 00:07:45.650
I parse in the image—that’s all I need
to do—and it’s returned a vector of blob

00:07:45.650 --> 00:07:46.650
objects.

00:07:46.650 --> 00:07:50.270
Technically, they are region feature objects.

00:07:50.270 --> 00:07:55.520
And there’s one object for each region or
each blob in the scene.

00:07:55.520 --> 00:08:01.360
So element number 1 is a blob with an area
of 7827.

00:08:01.360 --> 00:08:02.949
We can see its centroid.

00:08:02.949 --> 00:08:07.139
We can see is colour; that is, that it comprises
pixels with the value of 1.

00:08:07.139 --> 00:08:11.880
We can see its label; it’s got a label value
of 1, and a couple of other parameters as

00:08:11.880 --> 00:08:15.530
well which we will get to in due course.

00:08:15.530 --> 00:08:20.580
Blob number 2 also has an area of 7827 It’s
another shark.

00:08:20.580 --> 00:08:26.480
And blob number 3 has got a very large area;
and we can see its colour is equal to 0, so

00:08:26.480 --> 00:08:28.470
that is the background blob.

00:08:28.470 --> 00:08:32.659
Let’s show again the original image.

00:08:32.659 --> 00:08:34.959
Here we go, here’s the scene with two sharks
in it.

00:08:34.959 --> 00:08:41.180
For the first element in this vector of blobs,
that’s blob number 1, I can plot a bounding

00:08:41.180 --> 00:08:45.649
box and I can do that in the colour green
… there we go.

00:08:45.649 --> 00:08:54.350
For blob number 2, I can plot its bounding
box in green.

00:08:54.350 --> 00:09:02.029
I can also plot the centroid of the object
and I will plot that in blue and I’ll draw

00:09:02.029 --> 00:09:03.410
an asterisk there.

00:09:03.410 --> 00:09:07.389
The blobs have also got a number of parameters
or attributes.

00:09:07.389 --> 00:09:12.390
So, for instance, for blob number 1 I can
say what is its area.

00:09:12.390 --> 00:09:18.639
We can look at the colour of that particular
blob; we use the class attribute, and see

00:09:18.639 --> 00:09:22.949
that it is comprising pixels with a value
of 1.

00:09:22.949 --> 00:09:27.750
We can look at the centroid using the p attribute
and we see a vector here, which contains the

00:09:27.750 --> 00:09:29.980
u and v coordinates of its centroid.

00:09:29.980 --> 00:09:34.730
We can get the individual elements, uc is
the u coordinate of the centroid.

00:09:34.730 --> 00:09:41.939
We even find the moments have been stashed
away, so the 0,1 moment of that particular

00:09:41.939 --> 00:09:44.609
blob has got this particular value.

