WEBVTT
Kind: captions
Language: en

00:00:03.649 --> 00:00:08.139
Many machines and robots have got multiple
axis of motion.

00:00:08.139 --> 00:00:14.150
An industrial robot typically has six joints
and they have to move smoothly and in a coordinated

00:00:14.150 --> 00:00:15.150
fashion.

00:00:15.150 --> 00:00:19.620
A technique we can use to help us is linear
interpolation.

00:00:19.620 --> 00:00:25.619
Consider this simple function here where x
of s is a function of an initial value of

00:00:25.619 --> 00:00:27.619
x and a final value of x.

00:00:27.619 --> 00:00:30.009
And, s varies from 0 to 1.

00:00:30.009 --> 00:00:34.120
In this case, then, x of s is some sort of
intermediate value.

00:00:34.120 --> 00:00:41.520
X of 0 is the initial value, x of 1 is the
final value, and x of 0.5 is halfway in between

00:00:41.520 --> 00:00:43.580
the initial and final value.

00:00:43.580 --> 00:00:48.140
Now, x could be a vector which makes the multi-dimensional
case quite straightforward.

00:00:48.140 --> 00:00:54.270
For instance, it could be the xyz position
of some sort of machine or simple robot.

00:00:54.270 --> 00:00:59.420
So, x is a vector with the three elements
xyz and we can interpolate linearly between

00:00:59.420 --> 00:01:04.330
an initial position, an initial xyz and a
final xyz.

00:01:04.330 --> 00:01:08.190
S is a scalar which varies from 0 to 1.

00:01:08.190 --> 00:01:09.540
So, what is s?

00:01:09.540 --> 00:01:13.500
Well, S is a scalar that varies smoothly from
0 to 1.

00:01:13.500 --> 00:01:19.680
And, if S is a smooth function of time, then
x will be a smooth function of time since

00:01:19.680 --> 00:01:26.100
x is simply a linear function of S. We already
know how to make a smoothly varying function

00:01:26.100 --> 00:01:27.100
of time.

00:01:27.100 --> 00:01:31.909
It can be a polynomial function of time or
it could be a trapezoidal velocity profile

00:01:31.909 --> 00:01:33.310
function of time.

00:01:33.310 --> 00:01:35.960
Let’s look at a two-dimensional example.

00:01:35.960 --> 00:01:40.960
We want to move in the xy plane and I’ve
got a starting point and an ending point.

00:01:40.960 --> 00:01:44.720
Now, I want to move in a straight line from
the start to the end.

00:01:44.720 --> 00:01:49.110
I’m going to assign some arbitrary coordinates
to the start and the end.

00:01:49.110 --> 00:01:54.370
We’re back in MATLAB and now our first point
is a vector, not a scalar.

00:01:54.370 --> 00:02:03.560
So, the first point is the coordinate 10,
20, and our last point is a vector 30, 10.

00:02:03.560 --> 00:02:10.069
And this time, I’m going to use the function
jtraj, stands for joint interpolated trajectory.

00:02:10.069 --> 00:02:18.170
I’m going to move from the first point to
the last point in 50 time steps, and we see

00:02:18.170 --> 00:02:19.659
it all scrolling past.

00:02:19.659 --> 00:02:26.630
If we scroll back, we see that the first point
has indeed got the vector value of 10 and

00:02:26.630 --> 00:02:31.870
20, and the last point has got the value of
30 and 10.

00:02:31.870 --> 00:02:39.079
Let’s plot x as a function of time and we
can see here that our first axis has moved

00:02:39.079 --> 00:02:44.340
from 10 up to 30, second axis has moved from
20 down to 10.

00:02:44.340 --> 00:02:46.859
This function also returns the velocity.

00:02:46.859 --> 00:02:50.959
So, I can add that as an extra output argument,
XD.

00:02:50.959 --> 00:02:59.629
And now, we see x velocity as well and I can
plot XD versus time, and we can see that the

00:02:59.629 --> 00:03:05.389
velocity of each axis starts and ends at 0
and has a finite value in between.

00:03:05.389 --> 00:03:12.260
The function also allows me to specify an
initial and final velocity for the trajectory.

00:03:12.260 --> 00:03:17.280
So, if I ask for the initial velocity to be
0 which is the default condition, if I ask

00:03:17.280 --> 00:03:19.640
for the final velocity to be equal to 10.

00:03:19.640 --> 00:03:26.080
Now, if I plot the trajectory versus time,
we can see that at the end of a trajectory,

00:03:26.080 --> 00:03:32.310
the slopes of a line are not equal to 0 and
that’s because it is achieving its destination

00:03:32.310 --> 00:03:36.959
position at a finite velocity as we specified.

00:03:36.959 --> 00:03:40.329
Let’s consider a more complex two-dimensional
example.

00:03:40.329 --> 00:03:43.579
I’m going to start and end at this point
in the XY plane.

00:03:43.579 --> 00:03:48.909
I’m going to move to this point, this point,
this point, and back to where I started from.

00:03:48.909 --> 00:03:51.849
So, there are now three via points.

00:03:51.849 --> 00:03:55.010
I can assign some arbitrary coordinates to
these.

00:03:55.010 --> 00:03:59.109
In order to move smoothly through the via
points, we need to introduce blends and we

00:03:59.109 --> 00:04:02.060
talked about blends in a previous section.

00:04:02.060 --> 00:04:08.189
Here, we want to apply this idea of blends
which, in this example, is shown for a scalar

00:04:08.189 --> 00:04:09.189
variable x.

00:04:09.189 --> 00:04:13.560
We want to apply it to a multi-dimensional
case because now we’re talking about a robot

00:04:13.560 --> 00:04:16.630
moving in the xy plane.

00:04:16.630 --> 00:04:22.120
So now, each of the positions XI is a vector
rather than a scalar.

00:04:22.120 --> 00:04:27.460
Now, we’re going to look at a scenario where
points on the trajectory are vector quantities,

00:04:27.460 --> 00:04:30.860
two-vector in this case, and we have via points.

00:04:30.860 --> 00:04:34.069
Let’s do this square trajectory in MATLAB.

00:04:34.069 --> 00:04:45.780
Our starting coordinate is 40, 50 and the
via points are 60, 30 which is one row of

00:04:45.780 --> 00:04:54.039
the matrix, 40, 10 which is another row of
the matrix, 20, 30 and we finish where we

00:04:54.039 --> 00:04:55.039
started.

00:04:55.039 --> 00:04:57.800
And, that’s the list of via points.

00:04:57.800 --> 00:05:01.550
Now, I use the Toolbox function, mstraj.

00:05:01.550 --> 00:05:05.150
I pass in the list of via points.

00:05:05.150 --> 00:05:09.379
Passing the speed at which we’re going to
move along the path, the time of the segments

00:05:09.379 --> 00:05:10.710
is default.

00:05:10.710 --> 00:05:13.970
Now, start coordinate.

00:05:13.970 --> 00:05:19.599
The time step, 0.1 seconds and the acceleration
time, which I'm going to consider to be just

00:05:19.599 --> 00:05:21.509
1 second.

00:05:21.509 --> 00:05:25.430
And, I’ve created in the workspace variable
x.

00:05:25.430 --> 00:05:32.979
It’s got 435 rows, so that means that the
trajectory took 435 time steps to execute

00:05:32.979 --> 00:05:35.120
each time steps 0.1 seconds.

00:05:35.120 --> 00:05:38.199
That’s 43.5 second to execute.

00:05:38.199 --> 00:05:45.180
I can plot x versus time and we can see the
trajectory of the first and second coordinates

00:05:45.180 --> 00:05:48.680
versus time first coordinate shown in blue.

00:05:48.680 --> 00:05:53.840
If I plot the first coordinate against the
second coordinate, so that could be the x

00:05:53.840 --> 00:05:57.060
coordinate and that could be the y coordinate.

00:05:57.060 --> 00:05:58.729
I have a plot like this.

00:05:58.729 --> 00:06:04.470
So, this shows the motion of the point on
the xy plane and, indeed, it has the square

00:06:04.470 --> 00:06:08.830
profile that we are looking for, but it’s
got rounded corners because we have specified

00:06:08.830 --> 00:06:11.310
a finite acceleration time.

00:06:11.310 --> 00:06:14.620
Let’s consider now an extra degree of difficulty.

00:06:14.620 --> 00:06:18.599
Let’s consider that the machine is capable
of moving at 2 meters a second in the x direction,

00:06:18.599 --> 00:06:22.520
but only 1 meter per second in the y direction.

00:06:22.520 --> 00:06:27.310
We need to take this in to account when we
figure the trajectory for the robot.

00:06:27.310 --> 00:06:31.030
Consider again this two-dimensional example
and this is the path that we want from the

00:06:31.030 --> 00:06:33.750
start to the end, that’s our desired path.

00:06:33.750 --> 00:06:39.199
But if the robot is capable of moving more
quickly in the x direction than in the y direction,

00:06:39.199 --> 00:06:41.439
the path might look something like this.

00:06:41.439 --> 00:06:46.030
It will go very, very quickly in the x direction
and also move a little bit in the y direction.

00:06:46.030 --> 00:06:50.370
But then, the x-axis will have achieved its
goal, so it will stop moving.

00:06:50.370 --> 00:06:55.479
But, the y-axis which is moving more slowly
has to keep on going, and so we end up with

00:06:55.479 --> 00:06:59.099
this dogleg path instead of our desired path.

00:06:59.099 --> 00:07:04.180
If I was cutting material on something like
a flatbed profiling machine, then I’d be

00:07:04.180 --> 00:07:08.379
rather upset if I had this path rather than
the desired one.

00:07:08.379 --> 00:07:14.430
So in order to achieve the desired path, we
need to take in to account the velocity of

00:07:14.430 --> 00:07:15.930
each of the axes.

00:07:15.930 --> 00:07:21.490
We need to work out how long the slowest axis
requires to get to the next via point.

00:07:21.490 --> 00:07:26.719
And then, we scale the velocity of the other
axes so that they all arrive at the same time

00:07:26.719 --> 00:07:31.550
at the via point, and then they all set off
again to the next via point.

00:07:31.550 --> 00:07:33.729
We repeat this process indefinitely.

00:07:33.729 --> 00:07:40.669
Now, we’re going to repeat the trajectory,
but this time we are going to specify the

00:07:40.669 --> 00:07:43.530
velocities of the axis being different.

00:07:43.530 --> 00:07:48.930
So, previously, the velocity was 2 units per
second in the x and y direction.

00:07:48.930 --> 00:07:56.909
Now, I’m going to specify a very slow x-axis,
only 1 unit per second, and a fast y-axis.

00:07:56.909 --> 00:08:02.819
If we now look at the trajectory level in
our workspace, we see it’s got 835 rows,

00:08:02.819 --> 00:08:08.409
0.1 second time step, so that means the trajectory
now takes 83 seconds, almost twice as long.

00:08:08.409 --> 00:08:14.259
And, that’s to be expected because, now,
the trajectory is being paced by the slowest

00:08:14.259 --> 00:08:15.259
axis.

00:08:15.259 --> 00:08:18.570
The slowest axis now can only move at only
1 unit per second.

00:08:18.570 --> 00:08:24.330
Previously, it was 2 units per second, so
we are limited now by an axis which is half

00:08:24.330 --> 00:08:30.449
the original speed, the trajectory has taken
roughly twice as long to execute.

00:08:30.449 --> 00:08:34.169
I can plot x versus time.

00:08:34.169 --> 00:08:40.870
We can see the 835 time steps and I can plot
x versus y.

