WEBVTT
Kind: captions
Language: en

00:00:04.240 --> 00:00:08.620
Welcome to week six in the Robotic Vision
Project. Just to recap, so far we've taken

00:00:08.620 --> 00:00:13.450
an image of our Robotic Vision worksheet and
we've separated our shapes into a particular

00:00:13.450 --> 00:00:18.770
colour, being either red, green or blue. We've
taken each 2D object and then classified it

00:00:18.770 --> 00:00:23.580
in terms of a shape and a size. And we've
produce a homography to rectify these positions

00:00:23.580 --> 00:00:26.880
into an X and Y Cartesian co-ordinate frame.

00:00:26.880 --> 00:00:30.040
Now we can put all this together to form our
complete vision system.

00:00:30.320 --> 00:00:33.620
Let's take a look now at the outputs of this in MATLAB.

00:00:34.630 --> 00:00:39.079
Okay so in MATLAB here, I have the four different
functions that you've had to write throughout

00:00:39.079 --> 00:00:41.969
the different weeks of the Robotic Vision
Project.

00:00:41.969 --> 00:00:46.489
The first function that you needed to write
was called "getColor" and getColor returns

00:00:46.489 --> 00:00:53.100
the binary image on a particular channel that
you're interested of the Robotic Vision worksheet,

00:00:53.100 --> 00:00:58.980
so you could get a red binary image a green
binary image and a blue binary image.

00:00:58.980 --> 00:01:03.719
That binary image was then fed into the next
function that we wrote, which was called "getShape"

00:01:03.719 --> 00:01:09.700
and how getShape worked is that, that found
for us the particular 2D object in the binary

00:01:09.700 --> 00:01:15.850
image that we were interested in, so we could
find either a circle, square or a triangle

00:01:15.850 --> 00:01:21.560
and a different size; being either small or
large. The next function that we wrote was

00:01:21.560 --> 00:01:26.680
called "getCalibration". Now how getCalibration
worked was that that was a function that allowed

00:01:26.680 --> 00:01:32.470
us to find the blue circles on the Robotic
Vision worksheet page and that returned the

00:01:32.470 --> 00:01:37.400
particular blobs, such that we know where
the centroids of those blobs were in our Robotic

00:01:37.400 --> 00:01:39.409
Vision worksheet image.

00:01:39.409 --> 00:01:43.610
The final function that we wrote was called
"getHomography" and getHomography took in

00:01:43.610 --> 00:01:51.850
the centroid position of the blobs and also
we supplied it with the X and Y Cartesian

00:01:51.850 --> 00:01:56.780
co-ordinates of the circles on our Robotic
Vision worksheet page and then that generated

00:01:56.780 --> 00:02:03.369
a homography matrix such that we could rectify
the Robotic Vision worksheet, so we could

00:02:03.369 --> 00:02:07.380
find the 2D object positions on the page.

00:02:07.380 --> 00:02:12.550
Now I've wrapped up these four different functions
into a script which I've called "prac" so

00:02:12.550 --> 00:02:19.360
let's run this script now and see what the
output of the project should look like. Okay

00:02:19.360 --> 00:02:24.930
so this is the output from my prac script.
On the right hand side you can see that I

00:02:24.930 --> 00:02:31.069
have my Robotic Vision worksheet image and
I've identified all of the red 2D objects;

00:02:31.069 --> 00:02:38.790
so they're highlighted with a green rectangle,
so we have the red circles, the red squares

00:02:38.790 --> 00:02:44.349
and the red triangles are all highlighted.
I've also identified the green 2D objects

00:02:44.349 --> 00:02:51.480
and they are highlighted with a blue rectangle,
so we have the green circles here, the green

00:02:51.480 --> 00:02:59.650
squares and the two green triangles. The blue
circles are the small ones have been identified

00:02:59.650 --> 00:03:05.170
using a red asterisks, so eight of them have
been found and then finally we have our large

00:03:05.170 --> 00:03:09.030
blue circle, which is highlighted with our
green asterisks.

00:03:09.030 --> 00:03:14.030
On the left hand side we have the rectified
image, so from the calibration circles, I've

00:03:14.030 --> 00:03:21.220
rectified it such that the X and Y Cartesian
axis is at the top left hand corner and that

00:03:21.220 --> 00:03:28.030
allows us then to identify where the position
of the 2D objects are within this image and

00:03:28.030 --> 00:03:33.280
I've printed all this information out to the
MATLAB workspace, so you can see here I have

00:03:33.280 --> 00:03:38.239
the red 2D objects, and all the different
objects in the worksheet and also all the

00:03:38.239 --> 00:03:42.959
green ones; I've not printed out the blue
circle positions at all.

00:03:42.959 --> 00:03:48.269
And the columns here are the blob positions,
which are in pixels, so if I go back to this

00:03:48.269 --> 00:03:56.220
image here, this is the pixel positions in
these columns and then on the right hand side

00:03:56.220 --> 00:04:00.819
we have the final output of the Robotic Vision
Project.

00:04:00.819 --> 00:04:07.080
So the Cartesian X and Y co-ordinate positions
in millimetres of all of the 2D objects. So

00:04:07.080 --> 00:04:13.310
now you can compare your Cartesian X and Y
positions to what I've got and hopefully you've

00:04:13.310 --> 00:04:15.489
got something quite similar to this.

