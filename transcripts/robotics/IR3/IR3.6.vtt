WEBVTT
Kind: captions
Language: en

00:00:03.780 --> 00:00:08.340
For the two dimensional case we consider two
coordinate frames, the original frame A, and

00:00:08.340 --> 00:00:13.190
a rotated version of that, coordinate frame
B. And B is rotated in the positive direction

00:00:13.190 --> 00:00:21.110
by angle theta with respect to frame A. We
then described the new coordinate frame axes

00:00:21.110 --> 00:00:26.400
in terms of the old coordinate frame axes,
and we were able to write these relationships.

00:00:26.400 --> 00:00:32.119
We then wrote this in matrix form and we ended
up with a formulation that allowed us to transform

00:00:32.119 --> 00:00:40.219
vectors from the new frame to the old frame
A. The columns of this rotation matrix are

00:00:40.219 --> 00:00:47.999
the new X-axis that is the B-axis expressed
in terms of the A coordinate frame and the

00:00:47.999 --> 00:00:51.809
BY-axis in terms of the A coordinate frame.

00:00:51.809 --> 00:00:55.989
We used some quite complex geometry and diagrams
in order to show this.

00:00:55.989 --> 00:01:01.089
For three dimensions it's a little complex
to do that kind of geometric construction

00:01:01.089 --> 00:01:05.659
so we're just going to take the big principle
from last time.

00:01:05.659 --> 00:01:10.159
We'll start off in a similar fashion, here's
coordinate frame A and we've drawn a point

00:01:10.159 --> 00:01:13.640
which we can describe in terms of a vector
with respect to coordinate frame A. Iâ€™m

00:01:13.640 --> 00:01:18.600
going to introduce a new coordinate frame
B which is rotated with respect to coordinate

00:01:18.600 --> 00:01:24.460
frame A. And we're going to define the point
with another vector, vector BP which is the

00:01:24.460 --> 00:01:27.180
point in respect to a rotated frame B.

00:01:27.180 --> 00:01:30.450
We're going to pull the same trick as we did
for the 2-dimensional case.

00:01:30.450 --> 00:01:36.619
We're going to describe the axes of coordinate
frame B as unit vectors expressed in terms

00:01:36.619 --> 00:01:41.440
of coordinate frame A and they are the columns
of a new rotation matrix.

00:01:41.440 --> 00:01:45.520
In this case it's a 3x3 rotation matrix.

00:01:45.520 --> 00:01:50.479
So we're not going to go through the detailed
geometric construction, we're going to extrapolate

00:01:50.479 --> 00:01:55.750
from the 2-dimensional case and just write
this expression directly.

00:01:55.750 --> 00:02:01.460
This new rotation matrix transforms vectors
from the new coordinate frame B to the old

00:02:01.460 --> 00:02:08.140
coordinate frame A. This 3-dimensional rotation
matrix, this 3x3 matrix, has got a lot of

00:02:08.140 --> 00:02:11.270
similar properties to it's 2x2 counterpart.

00:02:11.270 --> 00:02:16.340
It is an orthogonal, sometimes called orthonormal,
matrix.

00:02:16.340 --> 00:02:21.870
That means each column in the matrix is a
unit length vector.

00:02:21.870 --> 00:02:27.040
Each column in the matrix is orthogonal to
all the other columns so that means if I take

00:02:27.040 --> 00:02:32.440
the dot product between column 1 and column
2 it will be equal to 0, same for column 1

00:02:32.440 --> 00:02:35.290
and column 3, column 2 and column 3.

00:02:35.290 --> 00:02:39.840
The inverse of this matrix is the same as
it's transpose and this is a really useful

00:02:39.840 --> 00:02:45.239
property because often times when we're computing
pose expressions we need to find the inverse

00:02:45.239 --> 00:02:50.030
of the rotation matrix and computationally
it's much simpler to compute the transpose

00:02:50.030 --> 00:02:53.519
than it is to compute the inverse for a 3x3
matrix.

00:02:53.519 --> 00:03:01.570
The determinant of this matrix is +1, that
means when we multiply a vector by this matrix,

00:03:01.570 --> 00:03:03.379
its length will be unchanged.

00:03:03.379 --> 00:03:09.450
A Mathematician would say that a matrix like
this belongs to the special orthogonal group

00:03:09.450 --> 00:03:15.710
of dimension 3 and that'll be written as R
being an element of the set SO(3).

00:03:15.710 --> 00:03:22.030
Three indicating that the matrix is 3x3, it
is rotation in 3-dimensional space.

00:03:22.030 --> 00:03:26.220
There are some very useful rotation matrices
that we can write down, we refer to these

00:03:26.220 --> 00:03:29.079
as elementary rotation matrices.

00:03:29.079 --> 00:03:35.180
The first one then is the rotation by theta
around the X axis, rotation by theta around

00:03:35.180 --> 00:03:40.250
the Y axis and finally rotation by theta about
the Z axis.

00:03:40.250 --> 00:03:45.819
And we can multiply these together in various
combinations in order to achieve much more

00:03:45.819 --> 00:03:48.790
complicated rotations; more about that shortly.

00:03:48.790 --> 00:03:53.500
In the last lecture when we considered 2-dimensional
rotations we wrote a rotation matrix that

00:03:53.500 --> 00:03:54.500
looks like this.

00:03:54.500 --> 00:03:59.670
In fact this is identical to the top left
corner of the elementary rotation matrix for

00:03:59.670 --> 00:04:01.360
rotation about Z.

00:04:01.360 --> 00:04:04.440
The reason about this quite intuitive.

00:04:04.440 --> 00:04:09.920
In the 2 dimensional case we are actually
rotating around the unseen Z axis which was

00:04:09.920 --> 00:04:14.629
sticking up at us out of the screen and was
effectively invisible.

00:04:14.629 --> 00:04:20.739
So there is an equivalence between 2-dimensional
rotation and the 3-dimensional rotation around

00:04:20.739 --> 00:04:22.030
the Z axis.

00:04:22.030 --> 00:04:27.639
When we're talking about orientation we consider
them in terms of a sequence of elementary

00:04:27.639 --> 00:04:31.030
rotations, so let's look at rotations around
the X-axis.

00:04:31.030 --> 00:04:36.190
Now this was the positive rotation direction
so if I rotate this coordinate frame by 90

00:04:36.190 --> 00:04:39.860
degrees around the X-axis it's going to look
like this.

00:04:39.860 --> 00:04:44.680
If I rotate it by minus 90 degrees around
the X-axis it's going to look like this.

00:04:44.680 --> 00:04:50.110
I can rotate it by positive 90 degrees around
the Y-axis so that's a rotation that way so

00:04:50.110 --> 00:04:55.340
positive 90 degrees rotation looks like this
and a negative 90 degrees rotation is going

00:04:55.340 --> 00:04:56.800
to look like this.

00:04:56.800 --> 00:05:01.500
Now positive rotation around the Z-axis is
this way, so if I rotate this frame 90 degrees

00:05:01.500 --> 00:05:06.669
around the Z-axis it's going to look like
this or if I rotate it by minus 90 degrees

00:05:06.669 --> 00:05:10.190
around the Z-axis it's going to look like
this.

00:05:10.190 --> 00:05:13.930
Let's have a look at some of these elementary
transformation matrices in MATLAB.

00:05:13.930 --> 00:05:19.400
We can use the function rotx to create a rotation
about the X-axis and I'm going to ask for

00:05:19.400 --> 00:05:20.759
a rotation of 0.2

00:05:20.759 --> 00:05:25.419
radians and this is what the rotation matrix
looks like.

00:05:25.419 --> 00:05:30.240
I could have also specified the angle in terms
of degrees so in this case what I look for

00:05:30.240 --> 00:05:36.170
is a rotation of 30 degrees around the X-axis.

00:05:36.170 --> 00:05:41.850
Let me put that matrix into a variable which
I'm going to call R for rotation it's a 3x3

00:05:41.850 --> 00:05:46.120
orthogonal rotation matrix and we'll just
test some of the properties we've mentioned

00:05:46.120 --> 00:05:49.890
earlier about orthogonal rotation matrices.

00:05:49.890 --> 00:05:54.410
I can look at the determinant of the matrix
and we can see that it is equal to 1.

00:05:54.410 --> 00:06:00.000
I can compute the inverse of that matrix and
we can see that it is exactly the same as

00:06:00.000 --> 00:06:02.500
a transpose of that matrix.

00:06:02.500 --> 00:06:07.030
And computationally this is particularly convenient
instead of having to invert the matrix I can

00:06:07.030 --> 00:06:09.360
simply transpose it.

00:06:09.360 --> 00:06:12.460
Computationally much, much cheaper.

00:06:12.460 --> 00:06:17.210
I can also compute a rotation about a different
axis I could ask for a rotation around the

00:06:17.210 --> 00:06:18.880
Y-axis by 0.2

00:06:18.880 --> 00:06:24.080
radians or a rotation around the Z-axis,
again by 0.3

00:06:24.080 --> 00:06:25.560
radians.

00:06:25.560 --> 00:06:31.110
The toolbox also contains a function which allows
me to graphically depict one of these rotation

00:06:31.110 --> 00:06:33.650
matrices as a rotated coordinate frame.

00:06:33.650 --> 00:06:39.430
So I can pass the last result, which is in
the automatic variable ans into the function

00:06:39.430 --> 00:06:45.490
trplot and here we can see the representation
of the rotated coordinate frame.

00:06:45.490 --> 00:06:50.650
The reference coordinate frame is indicated
here and the rotated coordinate frame is shown

00:06:50.650 --> 00:06:52.930
here in blue.

00:06:52.930 --> 00:06:55.090
The trplot function has got many, many options.

00:06:55.090 --> 00:06:58.970
We can change the color of the coordinate
frame, we can add a label to the frame, we

00:06:58.970 --> 00:07:00.900
can add arrowheads and so on.

