WEBVTT
Kind: captions
Language: en

00:00:03.530 --> 00:00:08.870
We want the position and orientation of our
robot to vary smoothly with time as it’s

00:00:08.870 --> 00:00:11.429
following the trajectory.

00:00:11.429 --> 00:00:13.309
We want to do this for a number of reasons.

00:00:13.309 --> 00:00:17.640
Firstly, we want to reduce the maximum acceleration
on the robot.

00:00:17.640 --> 00:00:21.590
If we can reduce the peak acceleration of
the robot, then we can reduce the size of

00:00:21.590 --> 00:00:23.790
the motors that are required.

00:00:23.790 --> 00:00:28.860
If the trajectory is smooth, then it’s not
going to induce vibrations into the structure

00:00:28.860 --> 00:00:29.860
of the robot.

00:00:29.860 --> 00:00:34.500
And, this is an important issue with very,
very large robots. But this raises the question

00:00:34.500 --> 00:00:35.860
of what is smooth?

00:00:35.860 --> 00:00:44.050
Now, firstly, we want the position of the
robot X as a function of time to be continuous,

00:00:44.050 --> 00:00:46.410
to have no discontinuities.

00:00:46.410 --> 00:00:50.769
We also want the velocity to be continuous
and the acceleration to be continuous.

00:00:50.769 --> 00:00:55.460
And perhaps, we want the third derivative,
which is referred to as jerk, to be continuous

00:00:55.460 --> 00:00:58.610
as well and perhaps the fourth derivative
and so on.

00:00:58.610 --> 00:01:05.320
There are very many smooth mathematical functions,
sinusoids, Gaussians and polynomials that we

00:01:05.320 --> 00:01:07.220
could perhaps press in to service.

00:01:07.220 --> 00:01:10.280
In robotics, it’s most common to use polynomials.

00:01:10.280 --> 00:01:15.840
And, the quintic polynomial, that’s a fifth
order polynomial, is particularly useful.

00:01:15.840 --> 00:01:20.250
The quintic polynomial has got six coefficients,
A, B, C, D, E and F.

00:01:20.250 --> 00:01:25.240
We’re going to consider the case S as a
function of T. So, S is the position that

00:01:25.240 --> 00:01:32.340
we’re interested in over a trajectory which
starts at time 0 and ends at time T. The advantage

00:01:32.340 --> 00:01:37.500
of the quintic polynomial is it got six coefficients
and that means that it got six boundary conditions.

00:01:37.500 --> 00:01:43.979
It means that we can independently set the
position, the velocity and the acceleration

00:01:43.979 --> 00:01:47.359
at the start time and at the end time.

00:01:47.359 --> 00:01:52.299
This table here then shows the names of the
symbols that we used to denote these boundary

00:01:52.299 --> 00:01:58.290
conditions, initial and final position, initial
and final acceleration, initial and final

00:01:58.290 --> 00:02:00.240
acceleration.

00:02:00.240 --> 00:02:04.750
Here is our quintic polynomial again and I
can compute its derivative with respect to

00:02:04.750 --> 00:02:05.750
time.

00:02:05.750 --> 00:02:10.820
So, this is the velocity along the path and
the acceleration along the path is obtained

00:02:10.820 --> 00:02:13.390
by yet another derivative.

00:02:13.390 --> 00:02:16.430
I can substitute in the boundary conditions.

00:02:16.430 --> 00:02:19.940
When time equals 0, I have these relationships
here.

00:02:19.940 --> 00:02:24.610
And, when time equals T, I have these relationships
here.

00:02:24.610 --> 00:02:29.520
Now, I can write these six constraint equations
in matrix form.

00:02:29.520 --> 00:02:31.440
It looks something like this.

00:02:31.440 --> 00:02:33.540
The matrix is 6 by 6.

00:02:33.540 --> 00:02:36.840
It’s square, which means that I can invert
it.

00:02:36.840 --> 00:02:41.319
And now, what I have is a relationship that
gives me the polynomial coefficients A through

00:02:41.319 --> 00:02:47.310
F in terms of the boundary conditions and
a matrix which is essentially a function of

00:02:47.310 --> 00:02:50.269
the trajectory time and some constants.

00:02:50.269 --> 00:02:54.590
Let’s create a polynomial trajectory and
to do that I’m going to use the Toolbox

00:02:54.590 --> 00:02:59.670
function tpoly, short hand for trajectory
polynomial.

00:02:59.670 --> 00:03:05.200
The polynomial is going to have an initial
value of 0, a final value of 1 and there are

00:03:05.200 --> 00:03:07.400
going to be 50 time steps.

00:03:07.400 --> 00:03:10.819
And here, we can see the trajectory.

00:03:10.819 --> 00:03:17.630
We can see that S starts off at 0 and rises
smoothly and settles out at a value of 1.

00:03:17.630 --> 00:03:24.340
We can see that the velocity starts at 0 and
ends at 0 and the acceleration also starts

00:03:24.340 --> 00:03:26.640
and ends at the value of 0.

00:03:26.640 --> 00:03:29.760
And so, change the final condition.

00:03:29.760 --> 00:03:36.090
So, instead of going from 0 to 1, it goes
from 0 to -1 and we can see the polynomial

00:03:36.090 --> 00:03:39.650
now does exactly that.

00:03:39.650 --> 00:03:45.160
I can get the value of the variable S from
this function if I provide an output argument

00:03:45.160 --> 00:03:52.420
and instead of producing a plot it will return
the vector S. And now, we have in our workspace

00:03:52.420 --> 00:03:58.690
S which is a vector with 50 rows and one column,
represents the value of S at each of the 50

00:03:58.690 --> 00:04:00.909
time steps.

00:04:00.909 --> 00:04:06.470
I can also ask for the velocity and the acceleration
and I’m going put those in to the variables

00:04:06.470 --> 00:04:11.370
SD and STD for S dot and S double dot.

00:04:11.370 --> 00:04:17.079
And again, I have created in my work space
some additional vector variables, each of

00:04:17.079 --> 00:04:18.810
them has got 50 rows.

00:04:18.810 --> 00:04:21.840
The rows correspond to the time steps.

00:04:21.840 --> 00:04:26.539
You'll notice in all the plots that the initial
and final velocities have been equal to 0.

00:04:26.539 --> 00:04:33.780
Well, I can override that by providing explicit
values for the initial and I’m going to

00:04:33.780 --> 00:04:38.061
ask the initial velocity to be 0.5 and
I’m going to ask for the final velocity

00:04:38.061 --> 00:04:39.410
to be equal to 0.

00:04:39.410 --> 00:04:44.620
What you can see is the initial velocity now
is equal to 0.5, final velocity is equal to

00:04:44.620 --> 00:04:45.620
0.

00:04:45.620 --> 00:04:49.670
But, what you'll notice is if you look at
the plot of S, you’ll see that it has gone

00:04:49.670 --> 00:04:53.210
from 0 to 1, but it has massively overshot.

00:04:53.210 --> 00:05:00.330
It has gone up as high as 5 and then reduced
to the desired final value.

00:05:00.330 --> 00:05:04.770
By changing the boundary conditions, we have
dramatically changed the shape of the trajectory.

00:05:04.770 --> 00:05:11.400
So, we have seen that the quintic polynomial
makes nice, smooth curves moving from 0 to

00:05:11.400 --> 00:05:17.330
1 over a period of 50 time units and we can
see that the velocity is smooth and the acceleration

00:05:17.330 --> 00:05:18.330
is smooth.

00:05:18.330 --> 00:05:20.190
But, there’s a bit of a problem here.

00:05:20.190 --> 00:05:26.870
That is that the peak velocity that the robot
undertakes has got a value of 0.038 units,

00:05:26.870 --> 00:05:30.990
but the average velocity over the path is
much, much less.

00:05:30.990 --> 00:05:32.850
It’s only .02.

00:05:32.850 --> 00:05:37.020
On average, we’re only going at 52% of the
peak velocity for this path.

00:05:37.020 --> 00:05:41.820
So, that means that for most of the path,
the motor isn't working as hard as it could

00:05:41.820 --> 00:05:42.820
be.

00:05:42.820 --> 00:05:47.500
It means that we have to install a motor which
can go at this peak speed but mostly we’re

00:05:47.500 --> 00:05:48.810
not using that capacity.

00:05:48.810 --> 00:05:50.240
We’re wasting performance.

00:05:50.240 --> 00:05:54.150
It also means that it’s going to take us
longer to get where we want to go.

